#pragma once

#include <memory>
#include <string>
#include <vector>

struct Point
{
  int x;
  int y;
};

struct Size
{
  int width;
  int height;
};

// РџСЂРѕРІРµСЂСЏРµС‚, СЃРѕРґРµСЂР¶РёС‚СЃСЏ Р»Рё Р·Р°РґР°РЅРЅР°СЏ С‚РѕС‡РєР° РІ
// СЌР»Р»РёРїСЃРµ Р·Р°РґР°РЅРЅРѕРіРѕ СЂР°Р·РјРµСЂР° РЎС‡РёС‚Р°РµС‚СЃСЏ, С‡С‚Рѕ
// СЌР»Р»РёРїСЃ РІРїРёСЃР°РЅ РІ РїСЂСЏРјРѕСѓРіРѕР»СЊРЅРёРє СЃ РІРµСЂС€РёРЅР°РјРё
// РІ С‚РѕС‡РєР°С… (0, 0) Рё (size.width, size.height)
inline bool
IsPointInEllipse(Point p, Size size)
{
  // РќРѕСЂРјРёСЂСѓРµРј РєРѕРѕСЂРґРёРЅР°С‚С‹ С‚РѕС‡РєРё РІ РґРёР°РїР°Р·РѕРЅ (-1,
  // 1)
  double x = (p.x + 0.5) / (size.width / 2.0) - 1;
  double y = (p.y + 0.5) / (size.height / 2.0) - 1;
  // РџСЂРѕРІРµСЂСЏРµРј, Р»РµР¶РёС‚ Р»Рё С‚РѕС‡РєР° РІ РµРґРёРЅРёС‡РЅРѕРј
  // РєСЂСѓРіРµ
  return x * x + y * y <= 1;
}

// РР·РѕР±СЂР°Р¶РµРЅРёРµ. РџРёРєСЃРµР»Рё СЌС‚Рѕ СЃРёРјРІРѕР»С‹.
// РџРµСЂРІС‹Р№ РёРЅРґРµРєСЃ (РїРѕ std::vector) - СЃС‚СЂРѕРєРё
// РёР·РѕР±СЂР°Р¶РµРЅРёСЏ, РєРѕРѕСЂРґРёРЅР°С‚Р° y Р’С‚РѕСЂРѕР№ РёРЅРґРµРєСЃ
// (РїРѕ std::string) - СЃС‚РѕР»Р±С†С‹ РёР·РѕР±СЂР°Р¶РµРЅРёСЏ,
// РєРѕРѕСЂРґРёРЅР°С‚Р° x РџСЂРµРґРїРѕР»Р°РіР°РµС‚СЃСЏ, С‡С‚Рѕ РґР»РёРЅР°
// РІСЃРµС… СЃС‚СЂРѕРє РѕРґРёРЅР°РєРѕРІР°
using Image = std::vector<std::string>;

// РџРѕРґРґРµСЂР¶РёРІР°РµРјС‹Рµ РІРёРґС‹ С„РёРіСѓСЂ: РїСЂСЏРјРѕСѓРіРѕР»СЊРЅРёРє
// Рё СЌР»Р»РёРїСЃ
enum class ShapeType
{
  Rectangle,
  Ellipse
};

// РРЅС‚РµСЂС„РµР№СЃ С‚РµРєСЃС‚СѓСЂС‹
class ITexture
{
public:
  virtual ~ITexture() = default;

  // Р’РѕР·РІСЂР°С‰Р°РµС‚ СЂР°Р·РјРµСЂ С…СЂР°РЅРёРјРѕРіРѕ РёР·РѕР±СЂР°Р¶РµРЅРёСЏ
  virtual Size GetSize() const = 0;
  // Р’РѕР·РІСЂР°С‰Р°РµС‚ С…СЂР°РЅРёРјРѕРµ РёР·РѕР±СЂР°Р¶РµРЅРёРµ
  virtual const Image& GetImage() const = 0;
};

// РРЅС‚РµСЂС„РµР№СЃ С„РёРіСѓСЂС‹
class IShape
{
public:
  virtual ~IShape() = default;

  // Р’РѕР·РІСЂР°С‰Р°РµС‚ С‚РѕС‡РЅСѓСЋ РєРѕРїРёСЋ С„РёРіСѓСЂС‹.
  // Р•СЃР»Рё С„РёРіСѓСЂР° СЃРѕРґРµСЂР¶РёС‚ С‚РµРєСЃС‚СѓСЂСѓ, С‚Рѕ
  // СЃРѕР·РґР°РЅРЅР°СЏ РєРѕРїРёСЏ СЃРѕРґРµСЂР¶РёС‚ С‚Сѓ Р¶Рµ СЃР°РјСѓСЋ
  // С‚РµРєСЃС‚СѓСЂСѓ. Р¤РёРіСѓСЂР° Рё РµС‘ РєРѕРїРёСЏ СЃРѕРІРјРµСЃС‚РЅРѕ
  // РІР»Р°РґРµСЋС‚ СЌС‚РѕР№ С‚РµРєСЃС‚СѓСЂРѕР№.
  virtual std::unique_ptr<IShape> Clone() const = 0;

  virtual void SetPosition(Point) = 0;
  virtual Point GetPosition() const = 0;

  virtual void SetSize(Size) = 0;
  virtual Size GetSize() const = 0;

  virtual void SetTexture(std::shared_ptr<ITexture>) = 0;
  virtual ITexture* GetTexture() const = 0;

  // Р РёСЃСѓРµС‚ С„РёРіСѓСЂСѓ РЅР° СѓРєР°Р·Р°РЅРЅРѕРј РёР·РѕР±СЂР°Р¶РµРЅРёРё
  virtual void Draw(Image&) const = 0;
};

// РЎРѕР·РґР°С‘С‚ С„РёРіСѓСЂСѓ Р·Р°РґР°РЅРЅРѕРіРѕ С‚РёРїР°. Р’Р°Рј РЅСѓР¶РЅРѕ
// СЂРµР°Р»РёР·РѕРІР°С‚СЊ СЌС‚Сѓ С„СѓРЅРєС†РёСЋ.
std::unique_ptr<IShape>
MakeShape(ShapeType shape_type);
