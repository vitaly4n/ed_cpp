syntax = "proto3";

package transport_db;


// Renderer

message Point2D {
    double x = 1;
    double y = 2;
}

message Color {
    enum Type {
        NONE = 0;
        RGBA = 1;
        PREDEFINED = 2;
    }
    
    message Rgba {
        int32 red = 1;
        int32 green = 2;
        int32 blue = 3;
        double alpha = 4;
    }
    
    Type type = 1;
    Rgba rgba = 2;
    string name = 3;
}

message RenderSettings {
    double width = 1;
    double height = 2;
    double padding = 3;
    double stop_radius = 4;
    double line_width = 5;
    double underlayer_width = 6;
    double outer_margin = 7;
    int32 stop_label_font_size = 8;
    int32 bus_label_font_size = 9;
    Point2D stop_label_offset = 10;
    Point2D bus_label_offset = 11;
    Color underlayer_color = 12;
    repeated Color color_palette = 13;
    repeated string layers = 14;
}

message StopDistanceEdge {
    string to = 1;
    int32 distance = 2;
}

message StopDescription {
    string name = 1;
    Point2D position = 2;
    repeated StopDistanceEdge distances = 3;
}

message BusDescription {
    string start_stop = 1;
    string end_stop = 2;
    string bus_name = 3;
    repeated string stops = 4;
    repeated string routing_stops = 5;
}

message TransportRenderer {
    RenderSettings settings = 1;
    repeated StopDescription stop_descriptions = 2;
    repeated BusDescription bus_descriptions = 3;
}

// Router

message GraphEdge {
    uint32 from = 1;
    uint32 to = 2;
    double weight = 3;
}

message GraphIncidentEdges {
    repeated uint32 edges = 1;
}

message Graph {
    repeated GraphEdge edges = 1;
    repeated GraphIncidentEdges incidence_list = 2;
}

message RouterEntry {
    bool is_set = 1;
    double weight = 2;
    int64 prev_edge = 3;
}

message RouterEdgeEntries {
    repeated RouterEntry entries = 1;
}

message Router {
    repeated RouterEdgeEntries entries = 1;
}

message RoutingSettings {
    int32 bus_wait_time = 1;
    double bus_velocity = 2;
}

message StopVertexIds {
    string stop_name = 1;
    uint32 in = 2;
    uint32 out = 3;
}

message VertexInfo {
    string stop_name = 1;
}

message EdgeInfo {
    bool is_wait = 1;
    string bus_name = 2;
    uint32 span = 3;
}

message TransportRouter {
    RoutingSettings routing_settings = 1;
    Graph graph = 2;
    Router router = 3;
    repeated StopVertexIds stop_vertex_ids = 4;
    repeated VertexInfo vertices_info = 5;
    repeated EdgeInfo edges_info = 6;
}

// TransportCatalog

message Stop {
    string name = 1;
    repeated string buses = 2;
}

message Bus {
    string name = 1;
    uint32 stop_count = 2;
    uint32 unique_stop_count = 3;
    int32 road_route_length = 4;
    double geo_route_length = 5;
}

message TransportCatalog {
    repeated Bus buses = 1;
    repeated Stop stops = 2;
    TransportRouter transport_router = 3;
    TransportRenderer transport_renderer = 4;
}


